#include "Keyboard.h"

#include <HAL/HAL.h>
#include <HAL/Utilities.h>

#pragma warning(disable : 4309)

#pragma region Key mapping

u8 DefaultScanCodes[] = 
{
    0x00,
    KEY_ESCAPE,
    KEY_1, KEY_2, KEY_3, KEY_4, KEY_5, KEY_6, KEY_7, KEY_8, KEY_9, KEY_0, KEY_SELECT, KEY_OEM_PLUS, KEY_BACKSPACE,
    0x0F, 'A', 'Z', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', 0x1A, 0x1B, KEY_ENTER,
    KEY_LCONTROL, 'Q', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 0x28, KEY_SQUARE,
    KEY_LSHIFT, 0x2B, 'W', 'X', 'C', 'V', 'B', 'N', KEY_DECIMAL, KEY_SPEC_1, KEY_SPEC_0, KEY_PRIOR, KEY_RSHIFT,
    KEY_MULTIPLY, // PrintScreen
    KEY_LMENU, // Alt
    KEY_SPACE,
    KEY_CAPS,
    KEY_F1, // 0x3B
    KEY_F2,
    KEY_F3,
    KEY_F4,
    KEY_F5,
    KEY_F6,
    KEY_F7,
    KEY_F8,
    KEY_F9,
    KEY_F10, // 0x44
    KEY_NUMLOCK,
    0x46,
    KEY_NUMPAD7,
    KEY_NUMPAD8,
    KEY_NUMPAD9,
    KEY_SUBTRACT,
    KEY_NUMPAD4,
    KEY_NUMPAD5,
    KEY_NUMPAD6,
    KEY_ADD,
    KEY_NUMPAD1,
    KEY_NUMPAD2,
    KEY_NUMPAD3,
    KEY_NUMPAD0,
    '.',
    0x54,
    0x55,
    KEY_SPEC_2,
    KEY_F11,
    KEY_F12,
    0x59,
    0x5A,
    0x5B,
    0x5C,
    0x5D,
    0x5E,
    0x5F,
    0x60,
    0x63,
    0x64,
    0x65,
    0x66,
    0x67,
    0x68,
    0x69,
    0x6A,
    0x6B,
    0x6C,
    0x6D,
    0x6E,
    0x6F,
    0x70,
    0x71,
    0x72,
    0x73,
    0x74,
    0x75,
    0x76,
    0x77,
    0x78,
    0x79,
    0x7A,
    0x7B,
    0x7C,
    0x7D,
    0x7E,
    0x80,
    0x81,
    0x82,
    0x83,
    0x84,
    0x85,
    0x86,
    0x87,
    0x88,
    0x89,
    0x8A,
    0x8B,
    0x8C,
    0x8D,
    0x8E,
    0x8F,
    0x90,
    0x91,
    0x92,
    0x93,
    0x94,
    0x95,
    0x96,
    0x97,
    0x98,
    0x99,
    0x9A,
    0x9B,
    0x9C,
    0x9D,
    0x9E,
    0x9F,
    0xA0,
    0xA1,
    0xA2,
    0xA3,
    0xA4,
    0xA5,
    0xA6,
    0xA7,
    0xA8,
    0xA9,
    0xAA,
    0xAB,
    0xAC,
    0xAD,
    0xAE,
    0xAF,
    0xB0,
    0xB1,
    0xB2,
    0xB3,
    0xB4,
    0xB5,
    0xB6,
    0xB7,
    0xB8,
    0xB9,
    0xBA,
    0xBB,
    0xBC,
    0xBD,
    0xBE,
    0xBF,
    0xC0,
    0xC1,
    0xC2,
    0xC3,
    0xC4,
    0xC5,
    0xC6,
    0xC7,
    0xC8,
    0xC9,
    0xCA,
    0xCB,
    0xCC,
    0xCD,
    0xCE,
    0xCF,
    0xD0,
    0xD1,
    0xD2,
    0xD3,
    0xD4,
    0xD5,
    0xD6,
    0xD7,
    0xD8,
    0xD9,
    0xDA,
    0xDB,
    0xDC,
    0xDD,
    0xDE,
    0xDF,
    0xE0,
    0xE1,
    0xE2,
    0xE3,
    0xE4,
    0xE5,
    0xE6,
    0xE7,
    0xE8,
    0xE9,
    0xEA,
    0xEB,
    0xEC,
    0xED,
    0xEE,
    0xEF,
    0xF0,
    0xF1,
    0xF2,
    0xF3,
    0xF4,
    0xF5,
    0xF6,
    0xF7,
    0xF8,
    0xF9,
    0xFA,
    0xFB,
    0xFC,
    0xFD,
    0xFE,
    0xFF
};

u8 DefaultExtendedScanCodes[] = { 
    0x00,
    0x01,
    0x02,
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0A,
    0x0B,
    0x0C,
    0x0D,
    0x0E,
    0x0F,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1A,
    0x1B,
    KEY_ENTER,
    KEY_RCONTROL,
    0x1E,
    0x1F,
    0x20,
    0x21,
    0x22,
    0x23,
    0x24,
    0x25,
    0x26,
    0x27,
    0x28,
    0x29,
    0x2A,
    0x2B,
    0x2C,
    0x2D,
    0x2E,
    0x2F,
    0x30,
    0x31,
    0x32,
    0x33,
    0x34,
    KEY_DIVIDE,
    0x36,
    0x37,
    KEY_RMENU, // Alt Gr
    0x39,
    0x3A,
    0x3B,
    0x3C,
    0x3D,
    0x3E,
    0x3F,
    0x40,
    0x41,
    0x42,
    0x43,
    0x44,
    0x45,
    0x46,
    0x47,
    0x48,
    0x49,
    0x4A,
    0x4B,
    0x4C,
    0x4D,
    0x4E,
    0x4F,
    0x50,
    0x51,
    0x52,
    0x53,
    0x54,
    0x55,
    0x56,
    0x57,
    0x58,
    0x59,
    0x5A,
    0x5B,
    0x5C,
    0x5D,
    0x5E,
    0x5F,
    0x60,
    0x61,
    0x62,
    0x63,
    0x64,
    0x65,
    0x66,
    0x67,
    0x68,
    0x69,
    0x6A,
    0x6B,
    0x6C,
    0x6D,
    0x6E,
    0x6F,
    0x70,
    0x71,
    0x72,
    0x73,
    0x74,
    0x75,
    0x76,
    0x77,
    0x78,
    0x79,
    0x7A,
    0x7B,
    0x7C,
    0x7D,
    0x7E,
    0x7F,
    0x80,
    0x81,
    0x82,
    0x83,
    0x84,
    0x85,
    0x86,
    0x87,
    0x88,
    0x89,
    0x8A,
    0x8B,
    0x8C,
    0x8D,
    0x8E,
    0x8F,
    0x90,
    0x91,
    0x92,
    0x93,
    0x94,
    0x95,
    0x96,
    0x97,
    0x98,
    0x99,
    0x9A,
    0x9B,
    0x9C,
    0x9D,
    0x9E,
    0x9F,
    0xA0,
    0xA1,
    0xA2,
    0xA3,
    0xA4,
    0xA5,
    0xA6,
    0xA7,
    0xA8,
    0xA9,
    0xAA,
    0xAB,
    0xAC,
    0xAD,
    0xAE,
    0xAF,
    0xB0,
    0xB1,
    0xB2,
    0xB3,
    0xB4,
    0xB5,
    0xB6,
    0xB7,
    0xB8,
    0xB9,
    0xBA,
    0xBB,
    0xBC,
    0xBD,
    0xBE,
    0xBF,
    0xC0,
    0xC1,
    0xC2,
    0xC3,
    0xC4,
    0xC5,
    0xC6,
    0xC7,
    0xC8,
    0xC9,
    0xCA,
    0xCB,
    0xCC,
    0xCD,
    0xCE,
    0xCF,
    0xD0,
    0xD1,
    0xD2,
    0xD3,
    0xD4,
    0xD5,
    0xD6,
    0xD7,
    0xD8,
    0xD9,
    0xDA,
    0xDB,
    0xDC,
    0xDD,
    0xDE,
    0xDF,
    0xE0,
    0xE1,
    0xE2,
    0xE3,
    0xE4,
    0xE5,
    0xE6,
    0xE7,
    0xE8,
    0xE9,
    0xEA,
    0xEB,
    0xEC,
    0xED,
    0xEE,
    0xEF,
    0xF0,
    0xF1,
    0xF2,
    0xF3,
    0xF4,
    0xF5,
    0xF6,
    0xF7,
    0xF8,
    0xF9,
    0xFA,
    0xFB,
    0xFC,
    0xFD,
    0xFE,
    0xFF
};

#pragma endregion
#pragma region Char Codes Normal

char CharCodesNormal[] = 
{
    0x00,
    0x01,
    0x02,
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    '\b',
    '\t',
    0x0A,
    0x0B,
    0x0C,
    '\n',
    0x0E,
    0x0F,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1A,
    0x00, // Echap
    0x1C,
    0x1D,
    0x1E,
    0x1F,
    ' ',
    '!',
    0x22,
    0x23,
    '\r', // Home ?
    0x25,
    0x26,
    0x27,
    0x28,
    ')',
    0x2A,
    0x2B,
    0x2C,
    0x2D,
    0x2E,
    0x2F,
    '\x85', // à
    '&',
    '\x82', // é
    '"',
    0x27,
    '(',
    '-',
    '\x8A', // è
    '_',
    '\x87', // ç
    ':',
    ';',
    '<',
    0x3D,
    0x3E,
    '\xFD', // ²
    0x40,
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    't',
    'u',
    'v',
    'w',
    'x',
    'y',
    'z',
    0x5B,
    0x5C,
    0x5D,
    0x5E,
    0x5F,
    '0',
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9',
    '*',
    '+',
    0x6C,
    '-',
    ',',
    '/',
    0x00, // F1
    0x00, // F2
    0x00, // F3
    0x00, // F4
    0x00, // F5
    0x00, // F6
    0x00, // F7
    0x00, // F8
    0x00, // F9
    0x00, // F10
    0x00, // F11
    0x00, // F12
    0x7C,
    0x7D,
    0x7E,
    0x80,
    0x81,
    0x82,
    0x83,
    0x84,
    0x85,
    0x86,
    0x87,
    0x88,
    0x89,
    0x8A,
    0x8B,
    0x8C,
    0x8D,
    0x8E,
    0x8F,
    0x90,
    0x91,
    0x92,
    0x93,
    0x94,
    0x95,
    0x96,
    0x97,
    0x98,
    0x99,
    0x9A,
    0x9B,
    0x9C,
    0x9D,
    0x9E,
    0x9F,
    0, // LSHIFT
    0, // RSHIFT
    0, // LCONTROL
    0, // RCONTROL
    0, // LEMNU
    0, // RMENU
    0xA6,
    0xA7,
    0xA8,
    0xA9,
    0xAA,
    0xAB,
    0xAC,
    0xAD,
    0xAE,
    0xAF,
    0xB0,
    0xB1,
    0xB2,
    0xB3,
    0xB4,
    0xB5,
    0xB6,
    0xB7,
    0xB8,
    0xB9,
    0xBA,
    0xBB,
    '=',
    0xBD,
    0xBE,
    0xBF,
    0xC0,
    0xC1,
    0xC2,
    0xC3,
    0xC4,
    0xC5,
    0xC6,
    0xC7,
    0xC8,
    0xC9,
    0xCA,
    0xCB,
    0xCC,
    0xCD,
    0xCE,
    0xCF,
    0xD0,
    0xD1,
    0xD2,
    0xD3,
    0xD4,
    0xD5,
    0xD6,
    0xD7,
    0xD8,
    0xD9,
    0xDA,
    0xDB,
    0xDC,
    0xDD,
    0xDE,
    0xDF,
    0xE0,
    0xE1,
    0xE2,
    0xE3,
    0xE4,
    0xE5,
    0xE6,
    0xE7,
    0xE8,
    0xE9,
    0xEA,
    0xEB,
    0xEC,
    0xED,
    0xEE,
    0xEF,
    0xF0,
    0xF1,
    0xF2,
    0xF3,
    0xF4,
    0xF5,
    0xF6,
    0xF7,
    0xF8,
    0xF9,
    0xFA,
    0xFB,
    0xFC,
    0xFD,
    0xFE,
    0xFF
};
#pragma endregion
#pragma region Char Codes Shift

char CharCodesShift[] = 
{
    (char)0x00,
    0x01,
    0x02,
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    '\b',
    '\t',
    0x0A,
    0x0B,
    0x0C,
    '\n',
    0x0E,
    0x0F,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1A,
    0x00, // Echap
    0x1C,
    0x1D,
    0x1E,
    0x1F,
    ' ',
    '§',
    0x22,
    0x23,
    '\r', // Home ?
    0x25,
    0x26,
    0x27,
    0x28,
    '\xF8', //°
    0x2A,
    0x2B,
    0x2C,
    0x2D,
    0x2E,
    0x2F,
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    '/',
    '.',
    '>',
    0x3D,
    0x3E,
    0x00, // ²
    0x40,
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    0x5B,
    0x5C,
    0x5D,
    0x5E,
    0x5F,
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    '*',
    '+',
    0x6C,
    '-',
    '?',
    '/',
    0x00, // F1
    0x00, // F2
    0x00, // F3
    0x00, // F4
    0x00, // F5
    0x00, // F6
    0x00, // F7
    0x00, // F8
    0x00, // F9
    0x00, // F10
    0x00, // F11
    0x00, // F12
    0x7C,
    0x7D,
    0x7E,
    0x7F,
    0x80,
    0x81,
    0x82,
    0x83,
    0x84,
    0x85,
    0x86,
    0x87,
    0x88,
    0x89,
    0x8A,
    0x8B,
    0x8C,
    0x8D,
    0x8E,
    0x8F,
    0x90,
    0x91,
    0x92,
    0x93,
    0x94,
    0x95,
    0x96,
    0x97,
    0x98,
    0x99,
    0x9A,
    0x9B,
    0x9C,
    0x9D,
    0x9E,
    0x9F,
    0, // LSHIFT
    0, // RSHIFT
    0, // LCONTROL
    0, // RCONTROL
    0, // LEMNU
    0, // RMENU
    0xA6,
    0xA7,
    0xA8,
    0xA9,
    0xAA,
    0xAB,
    0xAC,
    0xAD,
    0xAE,
    0xAF,
    0xB0,
    0xB1,
    0xB2,
    0xB3,
    0xB4,
    0xB5,
    0xB6,
    0xB7,
    0xB8,
    0xB9,
    0xBA,
    0xBB,
    '+',
    0xBD,
    0xBE,
    0xBF,
    0xC0,
    0xC1,
    0xC2,
    0xC3,
    0xC4,
    0xC5,
    0xC6,
    0xC7,
    0xC8,
    0xC9,
    0xCA,
    0xCB,
    0xCC,
    0xCD,
    0xCE,
    0xCF,
    0xD0,
    0xD1,
    0xD2,
    0xD3,
    0xD4,
    0xD5,
    0xD6,
    0xD7,
    0xD8,
    0xD9,
    0xDA,
    0xDB,
    0xDC,
    0xDD,
    0xDE,
    0xDF,
    0xE0,
    0xE1,
    0xE2,
    0xE3,
    0xE4,
    0xE5,
    0xE6,
    0xE7,
    0xE8,
    0xE9,
    0xEA,
    0xEB,
    0xEC,
    0xED,
    0xEE,
    0xEF,
    0xF0,
    0xF1,
    0xF2,
    0xF3,
    0xF4,
    0xF5,
    0xF6,
    0xF7,
    0xF8,
    0xF9,
    0xFA,
    0xFB,
    0xFC,
    0xFD,
    0xFE,
    0xFF
};
#pragma endregion

#pragma warning(default : 4309)

bool enabled = false;

u8 KBD_GetStatus()
{
    return IO_Read8(KBD_CONTROLLER_PORT);
}
u8 KBD_ReadBuffer()
{
    return IO_Read8(KBD_ENCODER_PORT);
}

void KDB_Encoder_SendCommand(u8 command)
{
    for (;;)
        if (!IsFlag(KBD_GetStatus(), KBD_STATUS_IN_BUF))
            break;
    IO_Write8(KBD_ENCODER_PORT, command);
}
void KDB_Controller_SendCommand(u8 command)
{
    //while (IsFlag(KBD_GetStatus(), KBD_STATUS_IN_BUF));
    for (;;)
        if (!IsFlag(KBD_GetStatus(), KBD_STATUS_IN_BUF))
            break;
    IO_Write8(KBD_CONTROLLER_PORT, command);
}

void KBD_SetLEDs(bool numLock, bool capsLock, bool scrollLock)
{
    u8 data = 0;

    if (scrollLock)	data |= 1;
    if (numLock)	data |= 2;
    if (capsLock)	data |= 4;

    KDB_Encoder_SendCommand(KBD_ENCODER_SET_LEDS);
    KDB_Encoder_SendCommand(data);
}
bool KBD_SelfTest()
{
    KDB_Controller_SendCommand(KBD_CONTROLLER_SELFTEST);

    for (;;)
        if (!IsFlag(KBD_GetStatus(), KBD_STATUS_OUT_BUF))
            break;

    return KBD_ReadBuffer() == 0x55;
}
void KBD_Disable()
{
    KDB_Controller_SendCommand(KBD_CONTROLLER_DISABLE);
    enabled = false;
}
void KBD_Enable()
{
    KDB_Controller_SendCommand(KBD_CONTROLLER_ENABLE);
    enabled = true;
}
void KBD_ResetSystem()
{
    KDB_Controller_SendCommand(KBD_CONTROLLER_WRITE_OUT_PORT);
    KDB_Encoder_SendCommand(0xFE);
}

bool keyBuffer[0xFF] = { 0 };
KeyEventArgs lastPressedKey;

bool KBD_IsKeyPressed(u8 keyCode)
{
    return keyBuffer[keyCode];
}
KeyEventArgs KBD_GetLastPressedKey()
{
    KeyEventArgs result = lastPressedKey;
    lastPressedKey.Value = 0;
    return result;
}

void KBD_InterruptHandler()
{
    static bool released = false;
    static bool extendedCode = false;

    static bool control = false;
    static bool alt = false;
    static bool shift = false;

    //if (IsFlag(KBD_GetStatus(), KBD_STATUS_OUT_BUF))
    {
        u8 scanCode = KBD_ReadBuffer();
        released = IsFlag(scanCode, 0x80);

        if (scanCode == 0xE0)
            extendedCode = true;
        else
        {
            u8 keyCode;
            if (extendedCode)
                keyCode = DefaultExtendedScanCodes[scanCode & 0x7F];
            else
                keyCode = DefaultScanCodes[scanCode & 0x7F];
            extendedCode = false;

            keyBuffer[keyCode] = !released;

            control = keyBuffer[KEY_LCONTROL] || keyBuffer[KEY_RCONTROL] || keyBuffer[KEY_RMENU];
            alt = keyBuffer[KEY_LMENU] || keyBuffer[KEY_RMENU];
            shift = keyBuffer[KEY_LSHIFT] || keyBuffer[KEY_RSHIFT];

            if (!released)
            {
                lastPressedKey.KeyCode = keyCode;
                lastPressedKey.Control = control;
                lastPressedKey.Alt = alt;
                lastPressedKey.Shift = shift;

                if (shift)
                    lastPressedKey.AsciiChar = CharCodesShift[keyCode];
                else if (control && alt)
                    lastPressedKey.AsciiChar = 0;//CharCodesAltGr[keyCode];
                else
                    lastPressedKey.AsciiChar = CharCodesNormal[keyCode];
            }
        }
    }
}

void KBD_Install()
{
    Interrupt_AddRequestHandler(0x01, KBD_InterruptHandler);
}